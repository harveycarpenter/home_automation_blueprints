blueprint:
  name: Philips Tap Dial Switch â€” Scenes, Double-Tap, and Dim (no helpers)
  description: >
    Control 4 scenes (single tap) with optional double-tap scenes, plus dimming on rotate.
    Works with ZHA + Philips Hue Tap Dial (RDM002). Uses wait_for_trigger to detect double-taps.
  domain: automation
  source_url: https://github.com/apollo1220/blueprints/blob/main/philips_zigbee_dial.yaml

  input:
    remote:
      name: Philips Hue Tap Switch
      selector:
        device:
          integration: zha
          manufacturer: Signify Netherlands B.V.
          model: RDM002

    first_scene:
      name: First Scene (Single Tap)
      selector: { entity: { domain: scene } }

    first_double_scene:
      name: (OPTIONAL) First Scene (Double Tap)
      default: {}
      selector: { entity: { domain: scene } }

    second_scene:
      name: Second Scene (Single Tap)
      default: {}
      selector: { entity: { domain: scene } }

    second_double_scene:
      name: (OPTIONAL) Second Scene (Double Tap)
      default: {}
      selector: { entity: { domain: scene } }

    third_scene:
      name: Third Scene (Single Tap)
      default: {}
      selector: { entity: { domain: scene } }

    third_double_scene:
      name: (OPTIONAL) Third Scene (Double Tap)
      default: {}
      selector: { entity: { domain: scene } }

    fourth_scene:
      name: Fourth Scene (Single Tap)
      default: {}
      selector: { entity: { domain: scene } }

    fourth_double_scene:
      name: (OPTIONAL) Fourth Scene (Double Tap)
      default: {}
      selector: { entity: { domain: scene } }

    dimmable_light:
      name: Dimmable Light
      description: Select the light to dim when rotating the dial.
      default: {}
      selector:
        target:
          entity:
            domain: light

    dim_scale:
      name: Dimming Scale
      description: Scale factor for dimming (% per step). Lower = gentler, higher = faster.
      default: 1.0
      selector:
        number:
          min: 0.1
          max: 5.0
          step: 0.05

mode: single
max_exceeded: silent

variables:
  first_scene: !input first_scene
  first_double_scene: !input first_double_scene
  second_scene: !input second_scene
  second_double_scene: !input second_double_scene
  third_scene: !input third_scene
  third_double_scene: !input third_double_scene
  fourth_scene: !input fourth_scene
  fourth_double_scene: !input fourth_double_scene
  dimmable_light: !input dimmable_light
  dim_scale: !input dim_scale

trigger:
  - platform: event
    event_type: zha_event
    event_data:
      device_id: !input remote

action:
  - variables:
      command: "{{ trigger.event.data.command }}"
      scene: "{{ trigger.event.data.params.scene_id | default(-1) }}"
      step_size: "{{ trigger.event.data.params.step_size | default(10) }}"
      step_mode: "{{ trigger.event.data.params.step_mode | default('') }}"

  - choose:
      # ===== BUTTON PRESSED =====
      - conditions: "{{ command == 'recall' and scene != -1 }}"
        sequence:
          # Wait briefly for ANY second 'recall' from this device
          - wait_for_trigger:
              - platform: event
                event_type: zha_event
                event_data:
                  device_id: !input remote
                  command: recall
            timeout: "00:00:0.4"
            continue_on_timeout: true

          # Work out if this was a true double tap on the SAME scene
          - variables:
              is_double: >-
                {% if wait.completed and
                      wait.trigger is defined and
                      wait.trigger.event and
                      wait.trigger.event.data and
                      wait.trigger.event.data.params and
                      wait.trigger.event.data.params.scene_id is defined %}
                  {{ wait.trigger.event.data.params.scene_id == scene }}
                {% else %}
                  false
                {% endif %}

          - choose:
              # DOUBLE-TAP path
              - conditions: "{{ is_double }}"
                sequence:
                  - choose:
                      - conditions: "{{ scene == 1 and (first_double_scene|default('')|string) not in ['', '{}'] }}"
                        sequence:
                          - service: scene.turn_on
                            target: { entity_id: !input first_double_scene }

                      - conditions: "{{ scene == 0 and (second_double_scene|default('')|string) not in ['', '{}'] }}"
                        sequence:
                          - service: scene.turn_on
                            target: { entity_id: !input second_double_scene }

                      - conditions: "{{ scene == 5 and (third_double_scene|default('')|string) not in ['', '{}'] }}"
                        sequence:
                          - service: scene.turn_on
                            target: { entity_id: !input third_double_scene }

                      - conditions: "{{ scene == 4 and (fourth_double_scene|default('')|string) not in ['', '{}'] }}"
                        sequence:
                          - service: scene.turn_on
                            target: { entity_id: !input fourth_double_scene }

              # SINGLE-TAP path
              - conditions: "{{ not is_double }}"
                sequence:
                  - choose:
                      - conditions: "{{ scene == 1 and (first_scene|default('')|string) not in ['', '{}'] }}"
                        sequence:
                          - service: scene.turn_on
                            target: { entity_id: !input first_scene }

                      - conditions: "{{ scene == 0 and (second_scene|default('')|string) not in ['', '{}'] }}"
                        sequence:
                          - service: scene.turn_on
                            target: { entity_id: !input second_scene }

                      - conditions: "{{ scene == 5 and (third_scene|default('')|string) not in ['', '{}'] }}"
                        sequence:
                          - service: scene.turn_on
                            target: { entity_id: !input third_scene }

                      - conditions: "{{ scene == 4 and (fourth_scene|default('')|string) not in ['', '{}'] }}"
                        sequence:
                          - service: scene.turn_on
                            target: { entity_id: !input fourth_scene }

      # ===== DIM UP =====
      - conditions: >
          {{ command == 'step_with_on_off' and (step_mode|string) in ['StepMode.Up','StepMode.UP','up','Up'] }}
        sequence:
          - service: light.turn_on
            target: !input dimmable_light
            data:
              brightness_step_pct: "{{ (step_size|int) * (dim_scale|float) }}"
              transition: 1

      # ===== DIM DOWN =====
      - conditions: >
          {{ command == 'step_with_on_off' and (step_mode|string) in ['StepMode.Down','StepMode.DOWN','down','Down'] }}
        sequence:
          - service: light.turn_on
            target: !input dimmable_light
            data:
              brightness_step_pct: "{{ -1 * (step_size|int) * (dim_scale|float) }}"
              transition: 1
