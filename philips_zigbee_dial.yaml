blueprint:
  name: Philips Tap Dial Switch with Scene Control, Double Tap, and Dim
  description: >
    Control scenes with a Philips Hue Tap Switch (RDM002) via ZHA. Single tap per button,
    optional double-tap per button, plus dim up/down on hold.
  domain: automation
  input:
    remote:
      name: Philips Hue Tap Switch
      selector:
        device:
          integration: zha
          manufacturer: Signify Netherlands B.V.
          model: RDM002

    first_scene:
      name: First Scene (Single Tap)
      selector:
        entity:
          domain: scene
    first_double_scene:
      name: (OPTIONAL) First Scene (Double Tap)
      default: {}
      selector:
        entity:
          domain: scene

    second_scene:
      name: Second Scene (Single Tap)
      default: {}
      selector:
        entity:
          domain: scene
    second_double_scene:
      name: (OPTIONAL) Second Scene (Double Tap)
      default: {}
      selector:
        entity:
          domain: scene

    third_scene:
      name: Third Scene (Single Tap)
      default: {}
      selector:
        entity:
          domain: scene
    third_double_scene:
      name: (OPTIONAL) Third Scene (Double Tap)
      default: {}
      selector:
        entity:
          domain: scene

    fourth_scene:
      name: Fourth Scene (Single Tap)
      default: {}
      selector:
        entity:
          domain: scene
    fourth_double_scene:
      name: (OPTIONAL) Fourth Scene (Double Tap)
      default: {}
      selector:
        entity:
          domain: scene

    dimmable_light:
      name: Dimmable Light
      description: Select the light(s) to dim with the dial.
      default: {}
      selector:
        target:
          entity: {}

    dim_scale:
      name: Dimming Scale
      description: Lower = gentler steps, higher = faster steps.
      default: 1.0
      selector:
        number:
          min: 0.0
          max: 5.0
          step: 0.01

  source_url: https://github.com/apollo1220/blueprints/blob/main/philips_zigbee_dial.yaml

mode: parallel
max_exceeded: silent

variables:
  first_scene: !input first_scene
  first_double_scene: !input first_double_scene
  second_scene: !input second_scene
  second_double_scene: !input second_double_scene
  third_scene: !input third_scene
  third_double_scene: !input third_double_scene
  fourth_scene: !input fourth_scene
  fourth_double_scene: !input fourth_double_scene
  dimmable_light: !input dimmable_light
  dim_scale: !input dim_scale

trigger:
  - platform: event
    event_type: zha_event
    event_data:
      device_id: !input remote

action:
  - variables:
      command: "{{ trigger.event.data.command }}"
      # Known mapping for RDM002 via ZHA: buttons send recall with scene_ids 1,0,5,4
      scene: >-
        {% if trigger.event.data.params is defined and trigger.event.data.params.scene_id is defined %}
          {{ trigger.event.data.params.scene_id }}
        {% endif %}
      step_size: >-
        {% if trigger.event.data.params is defined and trigger.event.data.params.step_size is defined %}
          {{ trigger.event.data.params.step_size }}
        {% endif %}
      step_mode: >-
        {% if trigger.event.data.params is defined and trigger.event.data.params.step_mode is defined %}
          {{ trigger.event.data.params.step_mode }}
        {% endif %}

  - choose:

      # ---------- Single vs Double Tap (recall) ----------
      - conditions:
          - condition: template
            value_template: "{{ command == 'recall' }}"
        sequence:
          # Wait briefly for a second press; we check scene match after.
          - wait_for_trigger:
              - platform: event
                event_type: zha_event
                event_data:
                  device_id: !input remote
                  command: recall
            timeout: "00:00:0.35"
            continue_on_timeout: true

          - variables:
              is_double: >-
                {{ wait.trigger is not none
                   and wait.trigger.event is not none
                   and (wait.trigger.event.data.params is defined)
                   and (wait.trigger.event.data.params.scene_id == scene) }}

          - choose:
              # ---- Double tap branch ----
              - conditions:
                  - condition: template
                    value_template: "{{ is_double }}"
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: >
                              {{ scene == 1 and (first_double_scene | default('') | string) | length > 0 }}
                        sequence:
                          - service: scene.turn_on
                            target:
                              entity_id: !input first_double_scene
                      - conditions:
                          - condition: template
                            value_template: >
                              {{ scene == 0 and (second_double_scene | default('') | string) | length > 0 }}
                        sequence:
                          - service: scene.turn_on
                            target:
                              entity_id: !input second_double_scene
                      - conditions:
                          - condition: template
                            value_template: >
                              {{ scene == 5 and (third_double_scene | default('') | string) | length > 0 }}
                        sequence:
                          - service: scene.turn_on
                            target:
                              entity_id: !input third_double_scene
                      - conditions:
                          - condition: template
                            value_template: >
                              {{ scene == 4 and (fourth_double_scene | default('') | string) | length > 0 }}
                        sequence:
                          - service: scene.turn_on
                            target:
                              entity_id: !input fourth_double_scene
              # ---- Single tap fallback ----
              default:
                - choose:
                    - conditions:
                        - condition: template
                          value_template: "{{ scene == 1 }}"
                      sequence:
                        - service: scene.turn_on
                          target:
                            entity_id: !input first_scene
                    - conditions:
                        - condition: template
                          value_template: "{{ scene == 0 }}"
                      sequence:
                        - service: scene.turn_on
                          target:
                            entity_id: !input second_scene
                    - conditions:
                        - condition: template
                          value_template: "{{ scene == 5 }}"
                      sequence:
                        - service: scene.turn_on
                          target:
                            entity_id: !input third_scene
                    - conditions:
                        - condition: template
                          value_template: "{{ scene == 4 }}"
                      sequence:
                        - service: scene.turn_on
                          target:
                            entity_id: !input fourth_scene

      # ---------- Brightness up ----------
      - conditions:
          - condition: template
            value_template: "{{ command == 'step_with_on_off' }}"
          - condition: template
            value_template: "{{ step_mode in ['StepMode.Up', 0, '0', 'up', 'Up'] }}"
        sequence:
          - service: light.turn_on
            target: !input dimmable_light
            data:
              brightness_step_pct: "{{ step_size * dim_scale }}"
              transition: 1

      # ---------- Brightness down ----------
      - conditions:
          - condition: template
            value_template: "{{ command == 'step_with_on_off' }}"
          - condition: template
            value_template: "{{ step_mode in ['StepMode.Down', 1, '1', 'down', 'Down'] }}"
        sequence:
          - service: light.turn_on
            target: !input dimmable_light
            data:
              brightness_step_pct: "{{ -step_size * dim_scale }}"
              transition: 1
