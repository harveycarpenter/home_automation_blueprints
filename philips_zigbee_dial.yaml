blueprint:
  name: Philips Tap Dial Switch And Dim (With Automations)
  description: 'Control lights or run automations with a Philips Hue Tap Switch.
    Use the four buttons to control up to four light(s) or automations with an on/off toggle. Choose an entity to dim.'
  domain: automation
  input:
    remote:
      name: Philips Hue Tap Switch
      selector:
        device:
          integration: zha
          manufacturer: Signify Netherlands B.V.
          model: RDM002
    first_action:
      name: First Action
      description: Choose a light or automation to control with the first button
      selector:
        target:
          entity: {}
        automation: {}
    second_action:
      name: (OPTIONAL) Second Action
      description: Choose a light or automation to control with the second button
      default: {}
      selector:
        target:
          entity: {}
        automation: {}
    third_action:
      name: (OPTIONAL) Third Action
      description: Choose a light or automation to control with the third button
      default: {}
      selector:
        target:
          entity: {}
        automation: {}
    forth_action:
      name: (OPTIONAL) Forth Action
      description: Choose a light or automation to control with the forth button
      default: {}
      selector:
        target:
          entity: {}
        automation: {}
    current_light:
      name: (OPTIONAL) Current Light
      description: 'Text helper to track the current light to dim. Set for the dimmer controls to change which light they are controlling according to the last one turned on.'
      default:
      selector:
        entity:
          domain: input_text
    dimmable_light:
      name: (OPTIONAL) Dimmable Light
      description: 'Select the light to dim. If not selected, it will use the last controlled light.'
      default: {}
      selector:
        target:
          entity: {}
    dim_scale:
      name: Dimming Scale
      description: 'Scale factor for the dimming. This value will be multiplied by the value given from the dial. So lower number, more gradual dimming. Larger number, faster dimming.'
      default: 1.0
      selector:
        number:
          min: 0.0
          max: 5.0
          step: 0.01
  source_url: https://github.com/apollo1220/blueprints/blob/main/philips_zigbee_dial.yaml
mode: restart
max_exceeded: silent
variables:
  first_action: !input "first_action"
  second_action: !input "second_action"
  third_action: !input "third_action"
  forth_action: !input "forth_action"
  current_light: !input "current_light"
  dimmable_light: !input "dimmable_light"
  dim_scale: !input "dim_scale"
trigger:
  - platform: event
    event_type: zha_event
    event_data:
      device_id: !input "remote"
action:
  - variables:
      command: "{{ trigger.event.data.command }}"
      args: '{% if (trigger.event.data.args is defined) %}{{trigger.event.data.args}}{% endif %}'
      params: '{% if (trigger.event.data.params is defined) %}{{trigger.event.data.params}}{% endif %}'
      step_size: '{% if (trigger.event.data.params is defined) and (trigger.event.data.params.step_size is defined) %}{{trigger.event.data.params.step_size}}{% endif %}'
      step_mode: '{% if (trigger.event.data.params is defined) and (trigger.event.data.params.step_mode is defined) %}{{trigger.event.data.params.step_mode}}{% endif %}'
      scene: '{% if (trigger.event.data.params is defined) and (trigger.event.data.params.scene_id is defined) %}{{trigger.event.data.params.scene_id}}{% endif %}'
  - choose:
      - conditions:
          - "{{ command == 'recall' }}"
          - "{{ scene == 1 }}"
        sequence:
          - choose:
              - conditions: "{{ first_action.entity_id != none }}"
                sequence:
                  - service: homeassistant.toggle
                    target: !input "first_action"
              - conditions: "{{ first_action != none and first_action is string }}"
                sequence:
                  - service: automation.trigger
                    entity_id: !input "first_action"
          - choose:
              - conditions: "{{ current_light != none }}"
                sequence:
                  - service: input_text.set_value
                    target:
                      entity_id: !input "current_light"
                    data:
                      value: first_action
      - conditions:
          - "{{ command == 'recall' }}"
          - "{{ second_action != none }}"
          - "{{ scene == 0 }}"
        sequence:
          - choose:
              - conditions: "{{ second_action.entity_id != none }}"
                sequence:
                  - service: homeassistant.toggle
                    target: !input "second_action"
              - conditions: "{{ second_action != none and second_action is string }}"
                sequence:
                  - service: automation.trigger
                    entity_id: !input "second_action"
          - choose:
              - conditions: "{{ current_light != none }}"
                sequence:
                  - service: input_text.set_value
                    target:
                      entity_id: !input "current_light"
                    data:
                      value: second_action
      - conditions:
          - "{{ command == 'recall' }}"
          - "{{ third_action != none }}"
          - "{{ scene == 5 }}"
        sequence:
          - choose:
              - conditions: "{{ third_action.entity_id != none }}"
                sequence:
                  - service: homeassistant.toggle
                    target: !input "third_action"
              - conditions: "{{ third_action != none and third_action is string }}"
                sequence:
                  - service: automation.trigger
                    entity_id: !input "third_action"
          - choose:
              - conditions: "{{ current_light != none }}"
                sequence:
                  - service: input_text.set_value
                    target:
                      entity_id: !input "current_light"
                    data:
                      value: third_action
      - conditions:
          - "{{ command == 'recall' }}"
          - "{{ forth_action != none }}"
          - "{{ scene == 4 }}"
        sequence:
          - choose:
              - conditions: "{{ forth_action.entity_id != none }}"
                sequence:
                  - service: homeassistant.toggle
                    target: !input "forth_action"
              - conditions: "{{ forth_action != none and forth_action is string }}"
                sequence:
                  - service: automation.trigger
                    entity_id: !input "forth_action"
          - choose:
              - conditions: "{{ current_light != none }}"
                sequence:
                  - service: input_text.set_value
                    target:
                      entity_id: !input "current_light"
                    data:
                      value: forth_action
      - conditions:
          - "{{ command == 'step_with_on_off' }}"
          - "{{ step_mode == 'StepMode.Up' }}"
        sequence:
          - choose:
              - conditions: "{{ dimmable_light != none }}"
                sequence:
                  - service: light.turn_on
                    target: !input "dimmable_light"
                    data:
                      brightness_step_pct: "{{ step_size * dim_scale }}"
                      transition: 1
              - conditions: "{{ current_light != none }}"
                sequence:
                  - service: light.turn_on
                    target: "{{ lights[states(current_light)] }}"
                    data:
                      brightness_step_pct: "{{ step_size * dim_scale }}"
                      transition: 1
            default:
              - service: light.turn_on
                target: !input "first_action"
                data:
                  brightness_step_pct: "{{ step_size * dim_scale }}"
                  transition: 1
      - conditions:
          - "{{ command == 'step_with_on_off' }}"
          - "{{ step_mode == 'StepMode.Down' }}"
        sequence:
          - choose:
              - conditions: "{{ dimmable_light != none }}"
                sequence:
                  - service: light.turn_on
                    target: !input "dimmable_light"
                    data:
                      brightness_step_pct: "{{ -step_size * dim_scale }}"
                      transition: 1
              - conditions: "{{ current_light != none }}"
                sequence:
                  - service: light.turn_on
                    target: "{{ lights[states(current_light)] }}"
                    data:
                      brightness_step_pct: "{{ -step_size * dim_scale }}"
                      transition: 1
            default:
              - service: light.turn_on
                target: !input "first_action"
                data:
                  brightness_step_pct: "{{ -step_size * dim_scale }}"
                  transition: 1
